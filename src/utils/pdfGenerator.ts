// import jsPDF from 'jspdf';
// import html2canvas from 'html2canvas';
// import { Project } from '../types';
// import { formatCurrency } from './calculations';

// export const generateQuotationPDF = async (project: Project): Promise<void> => {
//   const pdf = new jsPDF();
  
//   // Header
//   pdf.setFontSize(20);
//   pdf.setTextColor(41, 128, 185);
//   pdf.text('SolarTech Solutions', 20, 30);
  
//   pdf.setFontSize(12);
//   pdf.setTextColor(0, 0, 0);
//   pdf.text('Solar Installation Quotation', 20, 45);
  
//   // Client Details
//   pdf.setFontSize(14);
//   pdf.text('Client Details:', 20, 65);
  
//   pdf.setFontSize(10);
//   pdf.text(`Name: ${project.personalDetails.name}`, 20, 80);
//   pdf.text(`Phone: ${project.personalDetails.phone}`, 20, 90);
//   pdf.text(`Email: ${project.personalDetails.email}`, 20, 100);
//   pdf.text(`Address: ${project.personalDetails.address}`, 20, 110);
  
//   // System Configuration
//   pdf.setFontSize(14);
//   pdf.text('System Configuration:', 20, 130);
  
//   pdf.setFontSize(10);
//   pdf.text(`Make: ${project.systemConfiguration.make}`, 20, 145);
//   pdf.text(`Watt Peak: ${project.systemConfiguration.wattPeak}W`, 20, 155);
//   pdf.text(`Number of Panels: ${project.systemConfiguration.numberOfPanels}`, 20, 165);
//   pdf.text(`System Size: ${project.calculations.systemSize} kW`, 20, 175);
  
//   // Pricing Breakdown
//   pdf.setFontSize(14);
//   pdf.text('Pricing Breakdown:', 20, 195);
  
//   pdf.setFontSize(10);
//   pdf.text(`Base Price: ${formatCurrency(project.calculations.totalBasePrice)}`, 20, 210);
//   pdf.text(`GST (${project.systemConfiguration.gstPercentage}%): ${formatCurrency(project.calculations.gstAmount)}`, 20, 220);
//   pdf.text(`Cleaning Charges: ${formatCurrency(project.systemConfiguration.cleaningCharges)}`, 20, 230);
//   pdf.text(`Subsidy: -${formatCurrency(project.systemConfiguration.subsidy)}`, 20, 240);
  
//   // Total
//   pdf.setFontSize(12);
//   pdf.setTextColor(41, 128, 185);
//   pdf.text(`Total Payable Amount: ${formatCurrency(project.calculations.totalPayableAmount)}`, 20, 260);
  
//   // Footer
//   pdf.setFontSize(8);
//   pdf.setTextColor(128, 128, 128);
//   pdf.text('Generated by SolarTech Solutions Management System', 20, 280);
//   pdf.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 290);
  
//   pdf.save(`quotation_${project.personalDetails.name.replace(/\s+/g, '_')}_${new Date().toISOString().slice(0, 10)}.pdf`);
// };

// export const generateQuotationFromElement = async (elementId: string, filename: string): Promise<void> => {
//   const element = document.getElementById(elementId);
//   if (!element) return;
  
//   const canvas = await html2canvas(element, {
//     scale: 2,
//     logging: false,
//     useCORS: true,
//   });
  
//   const imgData = canvas.toDataURL('image/png');
//   const pdf = new jsPDF();
//   const imgWidth = 210;
//   const pageHeight = 295;
//   const imgHeight = (canvas.height * imgWidth) / canvas.width;
//   let heightLeft = imgHeight;
  
//   let position = 0;
  
//   pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
//   heightLeft -= pageHeight;
  
//   while (heightLeft >= 0) {
//     position = heightLeft - imgHeight;
//     pdf.addPage();
//     pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
//     heightLeft -= pageHeight;
//   }
  
//   pdf.save(filename);
// };

import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { Project } from '../types';
import { formatCurrency } from './calculations';

// === Utility: safe image loader ===
const safeAddImage = (pdf: jsPDF, src: string, x: number, y: number, w: number, h: number) => {
  try {
    const img = new Image();
    img.src = src;
    pdf.addImage(img, 'PNG', x, y, w, h);
  } catch (e) {
    console.warn(`⚠️ Could not load image: ${src}`, e);
  }
};

// === Utility: safe table Y position ===
const nextY = (pdf: jsPDF, fallback: number) =>
  pdf.lastAutoTable?.finalY ? pdf.lastAutoTable.finalY + 10 : fallback;

// === Core builder ===
const buildQuotationPDF = (pdf: jsPDF, project: Project) => {
  try {
    // === Header ===
    safeAddImage(pdf, `${window.location.origin}/logo.png`, 15, 10, 40, 20);

    pdf.setFontSize(16);
    pdf.text('ANANT ENERGY QUOTATION', 70, 20);
    pdf.setFontSize(10);
    pdf.text(
      'Address: 2 DEV-ORAM, OPP. SBI BANK VANDE MATRAM, GOTA, AHMEDABAD - 382481',
      15,
      40
    );
    pdf.text('Contact: +91 9773476431', 15, 48);

    // === Customer & Subject ===
    pdf.setFontSize(12);
    pdf.text(`To: ${project.personalDetails.name}`, 15, 65);
    pdf.text(`Date: ${new Date().toLocaleDateString()}`, 150, 65);
    pdf.setFontSize(11);
    pdf.text(
      `SUBJECT: PROPOSAL FOR ${project.calculations.systemSize} KW GRID INTERACTIVE SOLAR ROOFTOP POWER PLANT`,
      15,
      80
    );

    // === Intro Text ===
    pdf.setFontSize(10);
    const introText =
      'Dear Sir,\n\nWe provide solutions in the entire solar spectrum, right from concept to commissioning. ' +
      'We specialize in EPC of on-grid/off-grid connected solar PV plants in industrial, commercial, and residential sectors. ' +
      'Complying with the rooftop solar standards laid by GEDA, our systems are recognized for quality & performance.\n\n' +
      'Please feel free to write back for queries at your end. Thank you.\n\nYours sincerely,\nANANT ENERGY';
    pdf.text(introText, 15, 95, { maxWidth: 180 });

    // === System Cost Table ===
    autoTable(pdf, {
      startY: 150,
      head: [['SR NO', 'DESCRIPTION', 'PRICE']],
      body: [
        ['1', 'System Recommended', `${project.calculations.systemSize} KW`],
        ['2', 'System Cost', formatCurrency(project.calculations.totalBasePrice)],
        [
          '3',
          `GST (${project.systemConfiguration.gstPercentage}%)`,
          formatCurrency(project.calculations.gstAmount),
        ],
        ['4', 'Fabrication & GEDA Charges', 'Included'],
        ['5', 'Meter Charges', 'Extra in Consumer Scope'],
        [
          '6',
          'Subsidy (MNRE)',
          `-${formatCurrency(project.systemConfiguration.subsidy)}`,
        ],
        [
          '7',
          'Cleaning System Charges',
          formatCurrency(project.systemConfiguration.cleaningCharges),
        ],
        [
          '8',
          'Total Payable',
          formatCurrency(project.calculations.totalPayableAmount),
        ],
      ],
    });

    // === Scope of Work Table ===
    autoTable(pdf, {
      startY: nextY(pdf, 160),
      head: [['SR NO', 'SYSTEM DESCRIPTION', 'REMARK']],
      body: [
        ['1', 'Module Mounting Structure', 'Included'],
        ['2', 'Mounting, Erection and Commissioning', 'Included'],
        ['3', 'Power Evacuations (Plant to Mains)', 'Included'],
        ['4', 'Earthing Systems (AC/DC)', 'Included'],
        ['5', 'Rooftop Area Requirement', '10 Sq.mtr/kWp (Customer Scope)'],
        ['6', 'Operation & Maintenance (5 Years)', 'Included (Cleaning by Customer)'],
      ],
    });

    // === Terms & Conditions Table ===
    autoTable(pdf, {
      startY: nextY(pdf, 200),
      head: [['SR NO', 'PARAMETERS', 'REMARK']],
      body: [
        ['1', 'GST, Duties, Levies, Cess etc.', 'Included (as per norms)'],
        ['2', 'Transport Charges', 'Included'],
        ['3', 'Payment Terms', '100% Advance'],
        ['4', 'Supply & Commissioning Period', 'Approx. 2 months'],
        ['5', 'Validity of Quote', '15 days from date of offer'],
        ['6', 'Extra/Additional Material Work', 'As per actual expenditure'],
      ],
    });

    // === Warranty Table ===
    autoTable(pdf, {
      startY: nextY(pdf, 240),
      head: [['COMPONENT', 'WARRANTY']],
      body: [
        ['SPV Modules (Manufacturing Defects)', '10 Years (Back to Back)'],
        [
          'SPV Modules (Performance)',
          '25 Years (90% power for 10 years, 80% for 25 years)',
        ],
        ['Inverter (Manufacturing Defects)', '7 Years (Back to Back)'],
      ],
    });

    // === System Configuration Table ===
    autoTable(pdf, {
      startY: nextY(pdf, 260),
      head: [['SR NO', 'DESCRIPTION', 'UNIT', 'QUANTITY', 'SIZE', 'MAKE']],
      body: [
        [
          '1',
          'Solar Modules',
          'Nos.',
          project.systemConfiguration.numberOfPanels,
          `${project.systemConfiguration.wattPeak} W`,
          project.systemConfiguration.make,
        ],
        [
          '2',
          'Module Mounting Structure',
          'Set',
          'As per design',
          '60*40*2 mm / 40*40*2 mm',
          'GI Hot Deep',
        ],
        ['3', 'Grid-Tied Inverter', 'No.', 'As per design', '-', 'Polycab / Solaryaan'],
        ['4', 'DCDB', 'No.', 'As per design', '-', 'C&S / Finder / Shelter'],
        ['5', 'ACDB', 'No.', 'As per design', '-', 'C&S / Finder / Shelter'],
        ['6', 'DC Cable (UV Protected)', 'Mtr.', 'As per design', '-', 'Polycab'],
        ['7', 'AC Cable', 'Mtr.', 'As per design', '-', 'Polycab'],
        ['8', 'Earthing Systems', 'Nos.', 'As per design', '-', 'Standard'],
        ['9', 'PVC Pipe', 'Lot', 'As per design', '-', 'Polycab'],
      ],
    });

    // === Client Logos ===
    pdf.setFontSize(12);
    pdf.text('Our Valuable Clients', 15, nextY(pdf, 280) + 20);

    safeAddImage(pdf, `${window.location.origin}/pic1.png`, 15, nextY(pdf, 280) + 30, 30, 20);
    safeAddImage(pdf, `${window.location.origin}/pic2.png`, 55, nextY(pdf, 280) + 30, 30, 20);

    // === Footer ===
    pdf.setFontSize(8);
    pdf.setTextColor(128, 128, 128);
    pdf.text(
      'Generated by ANANT ENERGY Management System',
      15,
      pdf.internal.pageSize.height - 10
    );
  } catch (err) {
    console.error('❌ PDF generation failed:', err);
    throw err;
  }
};

// === Exported functions ===
export const generateQuotationPDF = async (project: Project): Promise<void> => {
  const pdf = new jsPDF();
  buildQuotationPDF(pdf, project);

  pdf.save(
    `quotation_${project.personalDetails.name.replace(/\s+/g, '_')}_${new Date()
      .toISOString()
      .slice(0, 10)}.pdf`
  );
};

export const generateQuotationFromElement = async (
  project: Project,
  filename: string
): Promise<void> => {
  const pdf = new jsPDF();
  buildQuotationPDF(pdf, project);

  pdf.save(filename);
};
